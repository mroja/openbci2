
Message format:
 16 bits message type
 16 bits sender peer id
 X bits message data

Message type:
 - codes from 0x0000 to 0x00FF are reserved by OpenBCI 2 Core for internal and predefined message types
 - codes from 0x0100 to 0xFEFF can be used by user
 - codes from 0xFF00 to 0xFFFF are legacy compatibility layer from OpenBCI 1

Predefined message types:
 0 - None
 1 - Text?
 2 - Signal
 3 - Video
 4 - 

Sender peer ID:
 - broker peer has ID = 0
 - each peer receives unique ID from experiment controller

Each peer negotiates message types with broker peer:
 - REQ with type strings
 - receives codes for theese types

Broker receives logs by setting filter to LOGS msg type id.

Peer receives two parametrs on command line: it's ID and broker URL.

System messages:
 - HELLO: id [broker remembers time offset of this message]
   - URLs to bind to -> eg. can contain 'tcp://*:*'
 - REGISTER_PEER: list of real URLs 
   - id for msg_type
 - HEARTBEAT - 50ms?
   - OK or one of server messages:
     - PEERS_LIST - peer connects to all peers on this list
     - KILL - begin shutdown procedure
     - START - start generators
     - STOP - stop generators
 - CONNECTED
   - config -> start init
 - REGISTER_MSG_TYPE
 - READY
   - ok
 - BYEBYE - peer finished shutting down and will die, peer will not send or process anything after sending this message
   - BYE

First HEARTBEAT must be sent after HELLO.

Connecting to broker protocol:
 => send HELLO request with peer id and URLs list
 <= receive config

 => send REGISTER_MSG_TYPE
 <= receive msg type IDs

 => send READY
 <= ok

 => send HEARTBEAT
 <= ok or kill or start or stop?


Each peer connects to every other peer.

